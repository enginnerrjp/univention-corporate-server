#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Univention Management Console
#  handles UMC requests for a specified UMC module
#
# Copyright 2006-2020 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import locale
import os
import signal
import traceback
import resource
from argparse import ArgumentParser

import notifier

from univention.management.console.log import CORE, log_init, log_reopen
from univention.management.console.config import SERVER_DEBUG_LEVEL, ucr, get_int
# don't import univention.management.console.{modules,protocol} here as the locale is not yet set!

server = None


class UMC_Daemon(object):

	def __init__(self):
		self.server = None
		default_debug = SERVER_DEBUG_LEVEL
		default_locale = ucr.get('locale/default', 'C').split(':', 1)[0]
		self.parser = ArgumentParser()
		self.parser.add_argument(
			'-n', '--no-daemon', action='store_false',
			dest='daemon_mode', default=True,
			help='if set the process will not fork into the background')
		self.parser.add_argument(
			'-p', '--port', action='store', type=int,
			dest='port', default=6670,
			help='defines an alternative port number [default %(default)s]')
		self.parser.add_argument(
			'-u', '--unix-socket', action='store',
			default='/var/run/univention-management-console/server.socket',
			help='defines an alternative UNIX socket [default %(default)s]')
		self.parser.add_argument(
			'-l', '--language', action='store',
			dest='language', default=default_locale,
			help='defines the language to use [default: %(default)s]')
		self.parser.add_argument(
			'-d', '--debug', action='store', type=int, dest='debug', default=default_debug,
			help='if given than debugging is activated and set to the specified level [default: %(default)s]')
		self.parser.add_argument(
			'-L', '--log-file', action='store', dest='logfile', default='management-console-server',
			help='specifies an alternative log file [default: %(default)s]')
		self.options = self.parser.parse_args()

		# cleanup environment
		os.environ.clear()
		os.environ['PATH'] = '/bin:/sbin:/usr/bin:/usr/sbin'
		os.environ['LANG'] = default_locale

		# init logging
		if not self.options.daemon_mode:
			log_init('/dev/stderr', self.options.debug)
		else:
			log_init(self.options.logfile, self.options.debug)

		# for daemon runner
		if self.options.daemon_mode:
			self.stdin_path = os.path.devnull
			self.stdout_path = os.path.devnull
			self.stderr_path = os.path.devnull
		else:
			self.stdin_path = '/dev/stdin'
			self.stdout_path = '/dev/stderr'
			self.stderr_path = '/dev/stderr'
		self.pidfile_path = '/var/run/umc-server.pid'
		self.pidfile_timeout = 3

		# init daemon runner
		os.umask(0o077)
		signal.signal(signal.SIGHUP, self.signal_hang_up)
		signal.signal(signal.SIGUSR1, self.signal_user1)
		signal.signal(signal.SIGTERM, self.signal_terminate)
		#signal.signal(signal.SIGSEGV, self.signal_segfault)

		# set locale
		try:
			locale.setlocale(locale.LC_MESSAGES, locale.normalize(self.options.language))
			locale.setlocale(locale.LC_CTYPE, locale.normalize(self.options.language))
		except locale.Error:
			CORE.process('Specified locale is not available (%s)' % self.options.language)

	def run(self):
		from univention.management.console.protocol.server import Server

		try:
			resource.setrlimit(resource.RLIMIT_NOFILE, (64512, 64512))
		except (ValueError, resource.error) as exc:
			CORE.error('Could not raise NOFILE resource limits: %s' % (exc,))
		notifier.init(notifier.GENERIC)
		notifier.dispatch.MIN_TIMER = get_int('umc/server/dispatch-interval', notifier.dispatch.MIN_TIMER)

		# make sure the directory where to place socket files exists
		if not os.path.exists('/var/run/univention-management-console'):
			os.mkdir('/var/run/univention-management-console')

		with Server(port=self.options.port, unix=self.options.unix_socket) as self.server:
			CORE.process('Server started')
			notifier.loop()

	def signal_hang_up(self, signal, frame):
		if self.server is not None:
			try:
				self.server.reload()
			except EnvironmentError as exc:
				CORE.error('Could not reload server: %s' % (exc,))
		try:
			log_reopen()
		except EnvironmentError as exc:
			CORE.error('Could not reopen logfile: %s' % (exc,))

	def signal_user1(self, signal, frame):
		if self.server is not None:
			try:
				self.server.reload()
			except EnvironmentError as exc:
				CORE.error('Could not reload server: %s' % (exc,))

	def signal_terminate(self, signal, frame):
		if self.server is not None:
			self.server.exit()
		raise SystemExit('Shutting down UMC server')

	def signal_segfault(self, signal, frame):
		CORE.error('SEGFAULT! %s' % (''.join(traceback.format_stack(frame),)))
		signal.signal(signal.SIGSEGV, signal.SIG_DFL)
		os.kill(os.getpid(), signal.SIGSEGV)


if __name__ == "__main__":
	try:
		umc_daemon = UMC_Daemon()
		umc_daemon.run()
	except Exception:
		CORE.error(traceback.format_exc())
		raise
