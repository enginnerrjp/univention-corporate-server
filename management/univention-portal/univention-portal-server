#!/usr/bin/python2.7
#
# Univention Portal
#
# Copyright 2019-2020 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import json
import grp
import signal

import requests
import tornado.ioloop
import tornado.web
import ldap

from univention.config_registry import ConfigRegistry

from univention.portal import make_portal
from univention.portal.log import setup_logger, get_logger

ucr = ConfigRegistry()
ucr.load()

class JsonHandler(tornado.web.RequestHandler):
	def initialize(self, portals):
		self.portals = portals

	def _ask_umc(self, cookies):
		try:
			response = requests.get(UMC_SESSION_URL, cookies=cookies)
			data = response.json()
			username = data['result']['username']
		except requests.ConnectionError as exc:
			get_logger('user').error('connection failed: %s' % exc)
		except ValueError:
			get_logger('user').error('malformed answer: %s' % (response.text,))
		except KeyError:
			get_logger('user').warn('session unknown!')
		else:
			return username

	def _get_username(self, cookies):
		if not any(cookie.startswith('UMCSessionId') for cookie in cookies):
			get_logger('user').debug('no user given')
			return None
		get_logger('user').debug('searching user for cookies=%r' % (cookies,))
		username = self._ask_umc(cookies)
		if username is None:
			get_logger('user').debug('no user found')
		else:
			get_logger('user').debug('found %s' % username)
			return username.lower()

	def write_error(self, status_code, **kwargs):
		if 'exc_info' in kwargs:
			get_logger('server').exception('Error during service')
		return super(JsonHandler, self).write_error(status_code, **kwargs)

	def log_exception(self, typ, value, tb):
		if isinstance(value, (ldap.SERVER_DOWN, ldap.INSUFFICIENT_ACCESS, ldap.INVALID_CREDENTIALS, uexceptions.ldapError)):
			get_logger('server').info('Reconnecting ldap connection')
			for portal in self.portals.values():
				portal.refresh_ldap_connection()
		return super(JsonHandler, self).log_exception(typ, value, tb)

	def get(self):
		session = self.get_cookie('UMCSessionId')
		username = self._get_username(session)
		admin_mode = False
		if self.request.headers.get('X-Univention-Portal-Admin-Mode', 'no') == 'yes':
			get_logger('admin').info('Admin mode requested')
			admin_group_name = ucr.get('groups/default/domainadmins', 'Domain Admins')
			admins = [admin.lower() for admin in grp.getgrnam(admin_group_name)[3]]
			admin_mode = username in admins
			if admin_mode:
				get_logger('admin').info('Admin mode granted')
			else:
				get_logger('admin').info('Admin mode rejected')
		answer = {}
		portal = self.find_portal()
		if not portal:
			raise tornado.web.HTTPError(404)

		visible_content = portal.get_visible_content(username, admin_mode)
		answer['user_links'] = portal.get_user_links(username, admin_mode)
		answer['menu_links'] = portal.get_menu_links(username, admin_mode)
		answer['entries'] = portal.get_entries(visible_content)
		answer['folders'] = portal.get_folders(visible_content)
		answer['categories'] = portal.get_categories(visible_content)
		answer['portal'] = portal.get_meta(visible_content, answer['categories'])
		answer['filtered'] = not admin_mode
		self.write(answer)

	def find_portal(self):
		best_score = 0
		best_portal = None
		for name, portal in self.portals.items():
			score = portal.score(self.request)
			if score > best_score:
				best_portal = portal
		return best_portal


def signal_handler_reload(signo, frame):
	pass
	# FIXME
	# io_loop = tornado.ioloop.IOLoop.instance()
	# for portal in portals.values():
	# 	io_loop.add_callback_from_signal(portal.refresh_cache)


def get_portals():
	ret = {}
	with open('/usr/share/univention-portal/portals.json') as fd:
		portal_definitions = json.load(fd)
	for name, portal_definition in portal_definitions.items():
		get_logger('server').info('Building portal {}'.format(name))
		ret[name] = make_portal(portal_definition)
	return ret


def make_app():
	portals = get_portals()
	return tornado.web.Application([
		(r'/', JsonHandler, {'portals': portals}),
	])


if __name__ == "__main__":
	setup_logger()
	app = make_app()
	port = int(ucr.get('portal/port', 8095))
	get_logger('server').info('firing up portal server at port %s' % port)
	app.listen(port)
	signal.signal(signal.SIGHUP, signal_handler_reload)
	tornado.ioloop.IOLoop.current().start()
